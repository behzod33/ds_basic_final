import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from scipy.stats import gaussian_kde


# –†–∞—Å—à–∏—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
    layout="centered", # centered wide
    initial_sidebar_state="expanded",
    menu_items={  
        "Get Help": "https://github.com/behzod33/ds_basic_final/blob/master/README.md",
        "About": """Github –ø—Ä–æ–µ–∫—Ç–∞: 
                    https://github.com/behzod33/ds_basic_final/"""
    }
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@st.cache_data
def load_data(remove_duplicates=True):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df1 = pd.read_csv("datasets/ds_salaries.csv")
    df2 = pd.read_csv("datasets/salaries.csv")
    df3 = pd.read_csv("datasets/ds_salary_2024.csv")
    df = pd.concat([df1, df2, df3], axis=0, ignore_index=True)

    if remove_duplicates:
        df = df.drop_duplicates()

    job_titles_counts = df["job_title"].value_counts().to_dict()

    total_count = sum(job_titles_counts.values())
    threshold = total_count * 0.005

    valid_job_titles = {k for k, v in job_titles_counts.items() if v >= threshold}

    df = df[df["job_title"].isin(valid_job_titles)]

    df["job_title"] = df["job_title"].apply(lambda x: "Machine Learning Engineer" if x == "ML Engineer" 
                                        else "Data Scientist" if x == "Data Science" else x)

    return df


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–µ–Ω–∏—è KDE
def plot_salary_distribution(df, show_kde=False):
    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê")

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ (skewness)
    skewness = df["salary_in_usd"].skew()
    st.write(f"**–°–º–µ—â–µ–Ω–∏–µ –ó–ü –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ: {skewness:.2f}**")

    # –°–æ–∑–¥–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    fig = px.histogram(
        df, 
        x="salary_in_usd", 
        nbins=30, 
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö",
        labels={"salary_in_usd": "–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê"},
        opacity=0.6,
        histnorm="probability density" if show_kde else None,  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ KDE –≤–∫–ª—é—á–µ–Ω
    )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª KDE, –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    if show_kde:
        x_values = np.linspace(df["salary_in_usd"].min(), df["salary_in_usd"].max(), 1000)
        kde = gaussian_kde(df["salary_in_usd"].dropna())  # –£–¥–∞–ª—è–µ–º NaN –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º KDE
        y_values = kde(x_values)

        fig.add_trace(go.Scatter(
            x=x_values,
            y=y_values,
            mode="lines",
            name="KDE (–ü–ª–æ—Ç–Ω–æ—Å—Ç—å)",
            line=dict(color="red", width=2)
        ))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
    fig.update_layout(
        bargap=0.05,
        xaxis_title="–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê",
        yaxis_title="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å" if show_kde else "–ß–∞—Å—Ç–æ—Ç–∞",
        legend_title="–õ–µ–≥–µ–Ω–¥–∞"
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Streamlit
    st.plotly_chart(fig, use_container_width=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è boxplot
def plot_experience_salary(df, palette):
    st.subheader("üìä –ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø—ã—Ç–∞")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π boxplot
    fig = px.box(
        df, 
        x="experience_level", 
        y="salary_in_usd", 
        color="experience_level", 
        title="–ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø—ã—Ç–∞",
        labels={"experience_level": "–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞", "salary_in_usd": "–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê"},
        color_discrete_sequence=px.colors.qualitative.__dict__[palette]  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–∞–ª–∏—Ç—Ä–∞
    )

    # –ù–∞—Å—Ç—Ä–æ–∏–º –æ—Å–∏
    fig.update_layout(
        xaxis_title="–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞",
        yaxis_title="–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê",
        boxmode="group",
        showlegend=False
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Streamlit
    st.plotly_chart(fig, use_container_width=True)


def plot_top_jobs(df, top_n=20, palette="Viridis"):
    st.subheader(f"üìä –¢–æ–ø-{top_n} —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    top_job_titles = df["job_title"].value_counts().nlargest(top_n)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π bar chart
    fig = px.bar(
        x=top_job_titles.values,
        y=top_job_titles.index,
        orientation="h",
        title=f"–ß–∞—Å—Ç–æ—Ç–∞ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π (–¢–æ–ø {top_n})",
        labels={"x": "–ß–∞—Å—Ç–æ—Ç–∞", "y": "–î–æ–ª–∂–Ω–æ—Å—Ç–∏"},
        color=top_job_titles.values,  # –¶–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å—Ç–æ—Ç—ã
        color_continuous_scale=palette
    )

    # –£–ª—É—á—à–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        xaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
        yaxis_title="–î–æ–ª–∂–Ω–æ—Å—Ç–∏",
        coloraxis_showscale=False,  # –£–±–∏—Ä–∞–µ–º –ª–µ–≥–µ–Ω–¥—É —Ü–≤–µ—Ç–∞
        bargap=0.3
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Streamlit
    st.plotly_chart(fig, use_container_width=True)


def show():
    st.title("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    st.write("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ.")

    # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    remove_duplicates = st.checkbox("–£–¥–∞–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã?", value=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    df = load_data(remove_duplicates)

    # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
    selected_columns = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", df.columns.tolist(), default=df.columns.tolist())

    # –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–æ–∫
    min_index, max_index = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫", 0, len(df) - 1, (0, min(100, len(df) - 1)))

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º –∏ —Å—Ç—Ä–æ–∫–∞–º
    filtered_df = df.loc[min_index:max_index, selected_columns]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    st.subheader("üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(filtered_df, height=500, width=1200)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")

    # **–ü—Ä–æ—Å–º–æ—Ç—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É**
    st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ")

    column_for_unique_values = st.selectbox("üîé –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns.tolist())

    if column_for_unique_values:
        unique_values = df[column_for_unique_values].dropna().unique()
        st.write(f"**–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ `{column_for_unique_values}`:**")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        unique_df = pd.DataFrame(unique_values, columns=["–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"])
        st.dataframe(unique_df, height=250, width=300)  
    
    show_kde = st.checkbox("üìà –í–∫–ª—é—á–∏—Ç—å KDE (–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)", value=False)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    plot_salary_distribution(df, show_kde)

     # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
    palette_options = ["Set1", "Set2", "Set3", "Pastel", "Dark2"]
    selected_palette = st.selectbox("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É", palette_options, index=1)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plot_experience_salary(df, selected_palette)

    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    top_n = st.slider("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ", min_value=5, max_value=20, value=20)

    # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
    palette_options = ["Viridis", "Cividis", "Plasma", "Inferno", "Magma", "Turbo"]
    selected_palette = st.selectbox("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É", palette_options, index=0)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plot_top_jobs(df, top_n, selected_palette)

if __name__ == "__main__":
    show()
